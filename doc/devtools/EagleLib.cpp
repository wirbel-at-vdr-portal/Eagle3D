#include "EagleLib.h"

/*******************************************************************************
 * class ARC
 ******************************************************************************/
ARC::ARC() :
  angle1(0.0), angle2(0.0), cap(0),layer(0),radius(0),width(0),
  x1(0),y1(0),x2(0),y2(0),xc(0),yc(0) {}

/*******************************************************************************
 * class AREA
 ******************************************************************************/
AREA::AREA() : x1(0),y1(0),x2(0),y2(0) {}

/*******************************************************************************
 * class CIRCLE
 ******************************************************************************/
CIRCLE::CIRCLE() : layer(0),radius(0),width(0),x(0),y(0) {}

/*******************************************************************************
 * class GRID
 ******************************************************************************/
GRID::GRID() : distance(0.0),dots(false),on(false),multiple(0),unit(0),unitdist(0) {}

/*******************************************************************************
 * class HOLE
 ******************************************************************************/
HOLE::HOLE() : diameter(),drill(0),drillsymbol(0),x(0),y(0) {}

/*******************************************************************************
 * class LAYER
 ******************************************************************************/
LAYER::LAYER() : used(false),visible(false),color(0),fill(0),number(0) {}

/*******************************************************************************
 * class PAD
 ******************************************************************************/
PAD::PAD() :
  angle(0.0),diameter(),shape(),drill(0),drillsymbol(0),
  elongation(0),flags(0),x(0),y(0) {}

/*******************************************************************************
 * class WIRE
 ******************************************************************************/
WIRE::WIRE() :
  cap(0),curve(0.0),layer(0),style(0),width(0),
  x1(0),y1(0),x2(0),y2(0) {}


/*******************************************************************************
 * class TEXT
 ******************************************************************************/
TEXT::TEXT() :
  align(0),angle(0.0),font(0),layer(0),linedistance(0),mirror(0),
  ratio(0),size(0),spin(0),x(0),y(0) {}

/*******************************************************************************
 * class ATTRIBUTE
 ******************************************************************************/
ATTRIBUTE::ATTRIBUTE() : constant(false), display(0) {}

/*******************************************************************************
 * class RECTANGLE
 ******************************************************************************/
RECTANGLE::RECTANGLE() : angle(0.0),layer(0),x1(0),y1(0),x2(0),y2(0) {}

/*******************************************************************************
 * class SMD
 ******************************************************************************/
SMD::SMD() : angle(0.0),dx(),dy(),flags(0),layer(0),roundness(0),x(0),y(0) {}

/*******************************************************************************
 * class CONTACT
 ******************************************************************************/
CONTACT::CONTACT() : x(0),y(0) {}

/*******************************************************************************
 * class PACKAGE
 ******************************************************************************/
PACKAGE::PACKAGE() {}

/*******************************************************************************
 * class DEVICE
 ******************************************************************************/
DEVICE::DEVICE() : value(false) {}

/*******************************************************************************
 * class DEVICESET
 ******************************************************************************/
DEVICESET::DEVICESET() : activedevice(nullptr),value(false) {}

/*******************************************************************************
 * class DIMENSION
 ******************************************************************************/
DIMENSION::DIMENSION() :
  visible(false),dtype(0),extlength(0),extoffset(0),
  extwidth(0),layer(0),precision(0),ratio(0),size(0),
  unit(0),width(0),x1(0),y1(0),x2(0),y2(0),x3(0),y3(0) {}

/*******************************************************************************
 * class FRAME
 ******************************************************************************/
FRAME::FRAME() : columns(0),rows(0),border(0),layer(0),x1(0),y1(0),x2(0),y2(0) {}

/*******************************************************************************
 * class SYMBOL
 ******************************************************************************/
SYMBOL::SYMBOL() {}

/*******************************************************************************
 * class GATE
 ******************************************************************************/
GATE::GATE() : addlevel(0),swaplevel(0),x(0),y(0) {}

/*******************************************************************************
 * class LIBRARY
 ******************************************************************************/
LIBRARY::LIBRARY() {}

/*******************************************************************************
 * class PIN
 ******************************************************************************/
PIN::PIN() :
  angle(0.0),direction(0),function(0),length(0),route(0),swaplevel(0),
  visible(0),x(0),y(0) {}

/*******************************************************************************
 * class POLYGON
 ******************************************************************************/
POLYGON::POLYGON() :
  isolate(0),layer(0),orphans(false),pour(0),rank(0),
  spacing(0),thermals(false),width(0) {}




#include <iostream>
#include "pugixml.hpp"

int main(int n, char** a) {
  LIBRARY lib;
  std::string progname(*a);
  std::vector<std::string> args;
  for(int i=1; i<n; i++)
     args.push_back(a[i]);



  std::cout << args[0] << std::endl;

  pugi::xml_document doc;
  auto result = doc.load_file(args[0].c_str());

  if (not result) {
     std::cerr << "Parsing " << args[0] << "failed. :-(" << std::endl;
     return -1;
     }


  std::cout << result.description() << std::endl;

  return 0;
}

